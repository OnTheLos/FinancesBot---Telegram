from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from components import keyboards
from components.keyboards import ActionCallback
from components.states import AddCategory, DeleteOperation, Balance, EditCategory
from components import config

from data.scripts.DB_database import (check_db, create_table, get_info, get_categories, 
                                      create_table_with_categories, cat_add, delete_operation, 
                                      change_sum_currency, delete_category, add_data, edit_cat, check_data,
                                      start_get_last_operations, get_operation)
from data.scripts.DB_users import check_user


rt = Router()


@rt.message(F.text, Command('start'))
async def start(message: Message, id = None, edit = False):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID, –µ—Å–ª–∏ ID –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –≤ —Ñ—É–Ω–∫—Ü–∏—é
    if not id:
        id = message.from_user.id

    does_table_exists = check_db(id)                   # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –≤ –ë–î —Ç–∞–±–ª–∏—Ü–∞ —Å —é–∑–µ—Ä–æ–º
    main_currency = check_data(id, 'main_currency')    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ª–∏ —É —é–∑–µ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞
    does_user_exists = check_user(id)                  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–æ –≤—Å–µ–º–∏ —é–∑–µ—Ä–∞–º–∏ –±–æ—Ç–∞

    if not does_user_exists and config.GET_NOTIFY_ID:    # –ï—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–æ –≤—Å–µ–º–∏ —é–∑–µ—Ä–∞–º–∏, —Ç–æ:
        from main import bot
        nickname = message.from_user.full_name                                                  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∏–∫–∞ —é–∑–µ—Ä–∞
        username = message.from_user.username                                                   # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —é–∑–µ—Ä–Ω–µ–π–º–∞ —é–∑–µ—Ä–∞
                                                                
        await bot.send_message(chat_id=config.GET_NOTIFY_ID,                                  # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —é–∑–µ—Ä–µ
                            text=f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n\n{id}\n{nickname}\n@{username}')
        
    # –ï—Å–ª–∏ —É —é–∑–µ—Ä–∞ –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è —Å –µ—ë –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π
    if not does_table_exists:
        await default_categories(message)

    # –ï—Å–ª–∏ —É —é–∑–µ—Ä–∞ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞, –Ω–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞, —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è —Å –µ—ë –≤—ã–±–æ—Ä–æ–º
    if does_table_exists and not main_currency:
        await choose_currency(message)

    # –ï—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è —Å–æ–±–ª—é–¥–µ–Ω—ã
    if does_table_exists and main_currency and does_user_exists:
        bal = float(get_info(id, 'balance'))                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        bal = '{:.2f}'.format(bal).rstrip('0').rstrip('.')   # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        cur = get_info(id, 'main_currency')                  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞–ª—é—Ç—ã

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        incomes = start_get_last_operations(id, '+', 3)
        spends = start_get_last_operations(id, '-', 3)

        # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
        if not incomes:
            incomes = '<b>–£ –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞–Ω–µ—Å—ë–Ω–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤</b>\n'
        if not spends:
            spends = '<b>–£ –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞–Ω–µ—Å—ë–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç</b>\n'


        text = f'''<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —É—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –ó–∞–Ω–æ—Å–∏—Ç–µ —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ç—Ä–∞—Ç—ã –∑–∞ —Å–µ–∫—É–Ω–¥—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏.</b>
        
üí∞–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{bal} {cur}</b>

üìà –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Ö–æ–¥—ã:

{incomes}
üìâ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã: 

{spends}'''
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ (–ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏—é)
        if edit:
            await message.edit_text(text=text,
                                reply_markup=await keyboards.kb_start()) 
        else:
            await message.answer(text=text,
                                reply_markup=await keyboards.kb_start())   
    

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def default_categories(message: Message):
    buttons = [
        [
            InlineKeyboardButton(text='–î–∞', callback_data='defcat_yes'),
            InlineKeyboardButton(text='–ù–µ—Ç', callback_data='defcat_no')
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    incomes = '<b>–î–æ—Ö–æ–¥—ã:</b> "–ó–∞—Ä–ø–ª–∞—Ç–∞"'
    spends = '<b>–¢—Ä–∞—Ç—ã:</b> "–ü—Ä–æ–¥—É–∫—Ç—ã", "–ö–∞—Ñ–µ", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ü–æ–¥–ø–∏—Å–∫–∏", "–ü–æ–∫—É–ø–∫–∏", "–ó–¥–æ—Ä–æ–≤—å–µ", "–ü–æ–¥–∞—Ä–∫–∏"'

    await message.answer(text=f'–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?\n\n{spends}\n{incomes}\n\n–í –ª—é–±–æ–µ –≤—Ä–µ–º—è –∏—Ö –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å.',
                         reply_markup=kb)
    

# –•—ç–Ω–¥–ª–µ—Ä —Å –æ—Ç–≤–µ—Ç–æ–º —é–∑–µ—Ä–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@rt.callback_query(lambda c: 'defcat_' in c.data)
async def default_cat_set(call: CallbackQuery):
    data = call.data.split('_')[1]  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ - "yes" –∏–ª–∏ "no"
    id = call.from_user.id

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    if data == 'yes':
        create_table_with_categories(id)
    else:
        create_table(id) 

    # –í—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await call.answer()
    await start(call.message, id=id, edit=True)


# –§—É–Ω–∫—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞–ª—é—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö —é–∑–µ—Ä–æ–≤
async def choose_currency(message: Message):
    try:
        await message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É –¥–ª—è –±–æ—Ç–∞:', 
                                reply_markup=await keyboards.kb_start_currencies())
    except:
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É –¥–ª—è –±–æ—Ç–∞:', 
                            reply_markup=await keyboards.kb_start_currencies())


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è 
@rt.callback_query(ActionCallback.filter(F.action == 'choose_currency'))
async def choose_currency1(call: CallbackQuery):
    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É –¥–ª—è –±–æ—Ç–∞.\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ—Å–ª–µ —Å–º–µ–Ω—ã –≤–∞–ª—é—Ç—ã, –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–∞–ª—é—Ç—ã —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –Ω–æ–≤—É—é.</b>', 
                              reply_markup=await keyboards.kb_currencies())
    

@rt.callback_query(lambda c: '_my_currency' in c.data)
async def change_currency(call: CallbackQuery):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã –∏ –∞–π–¥–∏ —é–∑–µ—Ä–∞
    calldata = call.data.split(':')[1]
    data = calldata.split('_')[0]
    id = call.from_user.id

    result = change_sum_currency(id, data)   # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–∑–æ–≤ –≥–ª–∞–Ω–æ–≥–æ –º–µ–Ω—é, –µ—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
    if result:
        await call.message.edit_text(text=f'üíµ –í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É.\n\n–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞: {data}')
        await start(call.message, id=id)


# –•—ç–Ω–¥–ª–µ—Ä –º–µ–Ω—é –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@rt.callback_query(ActionCallback.filter(F.action == 'manage'))
async def manage(call: CallbackQuery):
    text = '''<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b>

üìí <b>–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b> ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤/—Ç—Ä–∞—Ç.

üìù <b>–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b> ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

üíµ <b>–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É</b> ‚Äî —Å–º–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞–ª—é—Ç—ã –±–æ—Ç–∞.

‚úèÔ∏è <b>–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b> ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.

üìÑ <b>–í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</b> ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx —Å–æ –≤—Å–µ–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è.

‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ</b> ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –ª—é–±–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.'''

    await call.message.edit_text(text=text, reply_markup=await keyboards.kb_manage())
    await call.answer()


# –•—ç–Ω–¥–ª–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@rt.callback_query(ActionCallback.filter(F.action == 'category_add'))
async def categoty_add_q(call: CallbackQuery, state: FSMContext):
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await call.message.edit_text(text='–ö–∞–∫–æ–π —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?', 
                                 reply_markup=await keyboards.kb_types_addc())
    await state.set_state(AddCategory.type)


# –í–Ω–µ—Å–µ–Ω–∏–µ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@rt.callback_query(ActionCallback.filter(F.action == 'cat_income'))
async def cat_income(call: CallbackQuery, state: FSMContext):
    await state.update_data(type='in_')
    await category_add(call, state)

@rt.callback_query(ActionCallback.filter(F.action == 'cat_spend'))
async def cat_income(call: CallbackQuery, state: FSMContext):
    await state.update_data(type='sp_')
    await category_add(call, state)


# –§—É–Ω–∫—Ü–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –ø—Ä–æ—Å—å–±–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def category_add(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ —Å–∏–º–≤–æ–ª—ã "><=/"', 
                                 reply_markup=await keyboards.kb_back_to_manage_st(),
                                 parse_mode=None)
    await state.set_state(AddCategory.name)
    call.answer()


@rt.message(AddCategory.name, F.text)
async def categoty_add1(message: Message, state: FSMContext): 
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∞ —Ç–∞–∫–∂–µ ID —é–∑–µ—Ä–∞
    name = message.text
    type = (await state.get_data())['type']
    id = message.from_user.id

    buttons = [
    [
        InlineKeyboardButton(text='‚óÑ –ù–∞–∑–∞–¥', callback_data=ActionCallback(action='back_to_manage_st').pack())
    ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)    

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è:
    if len(name) > 25 or any(symbol in name for symbol in ['<', '>', '=', '/']):
        # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ —Å–æ–±–ª—é–¥–µ–Ω—ã, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ:
        await message.answer(text='–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ —Å–∏–º–≤–æ–ª—ã "><=/"\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.',
                             reply_markup=kb,
                             parse_mode=None)
    else:
        # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è —Å–æ–±–ª—é–¥–µ–Ω—ã, —Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü—É
        result = cat_add(id, name, type)

        if result: 
            # –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await message.answer(text=f'üìí –ö–∞—Ç–µ–≥–æ—Ä–∏—è "{name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞')
            await start(message, id=id)
        else:
            # –ï—Å–ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ:
            await message.answer(text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.',
                                 reply_markup=kb)


# –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@rt.callback_query(ActionCallback.filter(F.action == 'delete'))
async def delete(call: CallbackQuery):

    buttons = [
        [
            InlineKeyboardButton(text='1Ô∏è‚É£ –û–ø–µ—Ä–∞—Ü–∏—é', callback_data=ActionCallback(action='delete_op').pack()),
            InlineKeyboardButton(text='üìí –ö–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data=ActionCallback(action='delete_cat').pack())
        ],
        [
            InlineKeyboardButton(text='‚óÑ –ù–∞–∑–∞–¥', callback_data=ActionCallback(action='back_to_manage').pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await call.message.edit_text(text='–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é?',
                                 reply_markup=kb)
    

# –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@rt.callback_query(ActionCallback.filter(F.action == 'delete_cat'))
async def delete_cat(call: CallbackQuery):
    buttons = [
        [
            InlineKeyboardButton(text='üìà –î–æ—Ö–æ–¥', callback_data='delete_cat_incomes'),
            InlineKeyboardButton(text='üìâ –¢—Ä–∞—Ç–∞', callback_data='delete_cat_spends')
        ],
        [
            InlineKeyboardButton(text='‚óÑ –ù–∞–∑–∞–¥', callback_data=ActionCallback(action='back_to_delete').pack())
        ]
    ]   
    kb = InlineKeyboardMarkup(inline_keyboard=buttons) 

    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
                                 reply_markup=kb)
    await call.answer()


@rt.callback_query(lambda c: 'delete_cat_' in c.data)
async def addoperation(call: CallbackQuery):
    data = call.data.split('_')[2]  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–ª–∞–µ–Ω–∏—è
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
    if data == 'incomes':
        type = '+'
    else: type = '-'
    id = call.from_user.id

    categories = get_categories(id, type)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    if categories:
        bd = InlineKeyboardBuilder()
        [bd.add(InlineKeyboardButton(           # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            text=f'"{i}"',                      # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            callback_data=f'delcat_{id}_{i}'))  # –ö–æ–ª–±—ç–∫ –∫–Ω–æ–ø–∫–∏
            for i in categories]
        
        if len(categories) >= 10:       # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π(–∫–Ω–æ–ø–æ–∫) –±–æ–ª–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 10...
            bd.adjust(2)                # –¢–æ –≤ –∫–∞–∂–¥–æ–º —Ä—è–¥—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±—É–¥–µ—Ç –ø–æ 2 —Å—Ç–æ–ª–±—Ü–∞ –∫–Ω–æ–ø–æ–∫
        else:                           # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 10...
            bd.adjust(1)                # –¢–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ 1 —Å—Ç–æ–ª–±–µ—Ü

        bd.row(InlineKeyboardButton(text='‚óÑ –ù–∞–∑–∞–¥', 
                                    callback_data=ActionCallback(action='back_to_delete').pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
        
        await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=bd.as_markup())
        await call.answer()

    # –ï—Å–ª–∏ —É —é–∑–µ—Ä–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Ç–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –æ–≤—Ç–µ—Ç:
    else:
        await call.answer(text='–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')


# –•—ç–Ω–¥–ª–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@rt.callback_query(lambda c: 'delcat_' in c.data)
async def delcatconfirm(call: CallbackQuery):
    data = call.data.split('_') 

    buttons = [
    [
        InlineKeyboardButton(text='–î–∞, —è —Ö–æ—á—É –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data=f'delcat1_{data[1]}_{data[2]}')
    ],
    [
        InlineKeyboardButton(text='- - -', callback_data=ActionCallback(action='none').pack())
    ],
    [
        InlineKeyboardButton(text='‚óÑ –ù–∞–∑–∞–¥', callback_data=ActionCallback(action='back_to_delete').pack())
    ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await call.message.edit_text(text=f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "{data[2]}"?\n\n–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, <b>—É–¥–∞–ª–∏—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è "{data[2]}" –∏ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –Ω–µ–π. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!</b>', 
                             reply_markup=kb)


# –•—ç–Ω–¥–ª–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@rt.callback_query(lambda c: 'delcat1_' in c.data)
async def addoperation(call: CallbackQuery):
    data = call.data.split('_')         # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–ª–±—ç–∫–∞     # delcat1_{id}_{category}
    delete_category(data[1], data[2])   # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await call.message.edit_text(text=f'‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "{data[2]}" —É–¥–∞–ª–µ–Ω–∞')
    await call.answer()
    await start(call.message, id=data[1])


# –•—ç–Ω–¥–ª–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@rt.callback_query(ActionCallback.filter(F.action == 'delete_op'))
async def delete_op(call: CallbackQuery, state: FSMContext):

    buttons = [
        [
            InlineKeyboardButton(text='‚óÑ –ù–∞–∑–∞–¥', callback_data=ActionCallback(action='back_to_delete').pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await call.message.edit_text(text='<b>–í–≤–µ–¥–∏—Ç–µ ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.</b>\n\n<i>–í—Å–µ ID —É–∫–∞–∑–∞–Ω—ã –≤ –ò—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö.</i>',
                                 reply_markup=kb)
    await state.set_state(DeleteOperation.opid)


# –•—ç–Ω–¥–ª–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
@rt.message(DeleteOperation.opid, F.text)
async def get_id_del(message: Message, state: FSMContext):
    opid = message.text                             # ID –æ–ø–µ—Ä–∞—Ü–∏–∏
    id = message.from_user.id                       # ID —é–∑–µ—Ä–∞
    await state.update_data(opid=opid)              # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞

    operation_text = get_operation(id, opid)        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏

    # –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    if operation_text:
        await message.answer(text=f'<b>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é?</b>\n\n{operation_text}\n–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –µ—ë <b>–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.</b>', 
                             reply_markup=await keyboards.kb_delete_operation_confirm())

    # –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
    else:
        buttons = [
        [
            InlineKeyboardButton(text='‚óÑ –ù–∞–∑–∞–¥', callback_data=ActionCallback(action='back_to_delete').pack())
        ]
        ]
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
        await message.answer(text='–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.', 
                                reply_markup=kb)


# –•—ç–Ω–¥–ª–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
@rt.callback_query(ActionCallback.filter(F.action == 'del_op_conf'))
async def del_op_conf(call: CallbackQuery, state: FSMContext):
    opid = (await state.get_data())['opid']     # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –æ–ø–µ—Ä–∞—Ü–∏–∏
    id = call.from_user.id                      # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —é–∑–µ—Ä–∞

    result = delete_operation(id, opid)              # –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

    # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if result:
        await call.answer(text='‚ùå –û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞')
        await start(call.message, id=id)


# –•—ç–Ω–¥–ª–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Å—É–º–º—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@rt.callback_query(ActionCallback.filter(F.action == 'edit_balance'))
async def edit_balance(call: CallbackQuery, state: FSMContext):
    id = call.from_user.id                       # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —é–∑–µ—Ä–∞
    cur = get_info(id, 'main_currency')          # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞–ª—é—Ç—ã

    buttons = [
    [
         InlineKeyboardButton(text='‚óÑ –ù–∞–∑–∞–¥', callback_data=ActionCallback(action='back_to_menu_st').pack())
    ]
        ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await call.message.edit_text(text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤ {cur}',
                                 reply_markup=kb)
    await state.set_state(Balance.balance)


@rt.message(Balance.balance)
async def edit_balance_type(message: Message):
    balance = message.text                      # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞, –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–æ–º
    id = message.from_user.id                   # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —é–∑–µ—Ä–∞
    balance = balance.replace(',', '.')         # –ó–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–ø—è—Ç—ã—Ö(–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å) –≤ –Ω–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ –Ω–∞ —Ç–æ—á–∫–∏
    temp_balance = balance.replace('.', '')     # –í–Ω–µ—Å–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±–µ–∑ —Ç–æ—á–µ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —á–∏—Å–ª–æ)
    cur = get_info(id, 'main_currency')         # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞–ª—é—Ç—ã —é–∑–µ—Ä–∞

    if not temp_balance.isdigit() and not (balance.count('.')) <= 1:            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å —á–∏—Å–ª–æ–º
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ')
    else:
        result = add_data(id, 'balance', balance)                               # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞

    if result:
        await message.answer(text=f'üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance} {cur}')      # –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ - –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è 
        await start(message, id=id)                                             # –í—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é


# –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@rt.callback_query(ActionCallback.filter(F.action == 'category_edit'))
async def category_edit(call: CallbackQuery):
    buttons = [
        [
            InlineKeyboardButton(text='üìà –î–æ—Ö–æ–¥', callback_data='edit_cat_incomes'),
            InlineKeyboardButton(text='üìâ –¢—Ä–∞—Ç–∞', callback_data='edit_cat_spends')
        ],
        [
            InlineKeyboardButton(text='‚óÑ –ù–∞–∑–∞–¥', callback_data=ActionCallback(action='back_to_manage').pack())
        ]
    ]   
    kb = InlineKeyboardMarkup(inline_keyboard=buttons) 

    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
                                 reply_markup=kb)
    await call.answer()  


@rt.callback_query(lambda c: 'edit_cat_' in c.data)
async def addoperation(call: CallbackQuery):
    data = call.data.split('_')[2]
    if data == 'incomes':
        op = '+'
    else: op = '-'
    id = call.from_user.id

    a = get_categories(id, op)

    if a:
        bd = InlineKeyboardBuilder()
        [bd.add(InlineKeyboardButton(
            text=f'"{i}"', 
            callback_data=f'editcat_{i}'))
            for i in a]
        if len(a) >= 10:
            bd.adjust(2)
        else:
            bd.adjust(1)
        bd.row(InlineKeyboardButton(text='‚óÑ –ù–∞–∑–∞–¥', callback_data=ActionCallback(action='categoty_edit').pack()))
        
        await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=bd.as_markup())
        await call.answer()

    else:
        await call.answer(text='–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')  


@rt.callback_query(lambda c: 'editcat_' in c.data)
async def categoty_edit(call: CallbackQuery, state: FSMContext):
    name = call.data.split('_')[1]
    await state.update_data(oldname=name)

    await call.message.edit_text(text='–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ —Å–∏–º–≤–æ–ª—ã "><=/"', 
                                 reply_markup=await keyboards.kb_back_to_manage_st(),
                                 parse_mode=None)
    await state.set_state(EditCategory.name1)
    call.answer()


@rt.message(EditCategory.name1, F.text)
async def categoty_edit1(message: Message, state: FSMContext): 
    newname = message.text                              # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    oldname = (await state.get_data())['oldname']       # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    id = message.from_user.id                           # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —é–∑–µ—Ä–∞

    buttons = [
    [
        InlineKeyboardButton(text='‚óÑ –ù–∞–∑–∞–¥', callback_data=ActionCallback(action='back_to_manage_st').pack())
    ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)    

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
    if len(newname) > 25 or any(symbol in newname for symbol in ['<', '>', '=', '/']):
        await message.answer(text='–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ —Å–∏–º–≤–æ–ª—ã "><=/"\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.',
                             reply_markup=kb,
                             parse_mode=None)
    else:
        result = edit_cat(id, newname, oldname)     # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        if result:  
            await message.answer(text=f'üìù –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{oldname}" –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "{newname}"')
            await start(message, id=id)
        else:
            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.',
                                 reply_markup=kb)






# –ö–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥

@rt.callback_query(ActionCallback.filter(F.action == 'back_to_manage'))
async def back_to_manage(call: CallbackQuery):
    await manage(call)
    await call.answer()


@rt.callback_query(ActionCallback.filter(F.action == 'back_to_menu'))
async def back_to_menu(call: CallbackQuery):
    id = call.from_user.id
    await start(call.message, id=id, edit=True)
    await call.answer()


@rt.callback_query(ActionCallback.filter(F.action == 'back_to_menu_st'))
async def back_to_menu(call: CallbackQuery, state: FSMContext):
    await state.clear()
    id = call.from_user.id
    await start(call.message, id=id, edit=True)
    await call.answer()


@rt.callback_query(ActionCallback.filter(F.action == 'back_to_manage_st'))
async def back_to_manage_st(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await manage(call)
    await call.answer()


@rt.callback_query(ActionCallback.filter(F.action == 'back_to_delete'))
async def back_to_manage(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await delete(call)
    await call.answer()


@rt.callback_query(ActionCallback.filter(F.action == 'none'))
async def none(call: CallbackQuery):
    await call.answer()









