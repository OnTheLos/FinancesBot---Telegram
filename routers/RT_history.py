from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest

from data.scripts.DB_database import get_categories, get_info
from data.scripts.DB_database import  get_history
from data.scripts.DB_currencies import cur_rate

from components import keyboards
from components.keyboards import ActionCallback


rt = Router()


# –•—ç–Ω–¥–ª–µ—Ä –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
@rt.callback_query(ActionCallback.filter(F.action == 'see_history'))
async def see_histor(call: CallbackQuery, state: FSMContext):

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–µ–π—Ç–∞ (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤)
    data = await state.get_data()
    if not data:                                                                                    # –ï—Å–ª–∏ —Å—Ç–µ–π—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã...
        await state.update_data(category='all', operation='all', period='alltime', page=1)          # —Ç–æ –∑–∞–Ω–æ—Å—è—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    elif len(data) != 4:                               # –ï—Å–ª–∏ —Å—Ç–µ–π—Ç–æ–≤ –≤ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–µ–Ω–µ–µ 4-—Ö...       
        await state.clear()                            # —Ç–æ –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—á–∏—â–∞–µ—Ç—Å—è...
        await see_histor(call, state)                  # –∏ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ        

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    filters = await state.get_data()            # –°–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π

    id = call.from_user.id                      # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —é–∑–µ—Ä–∞
    category = filters['category']              # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    operation = filters['operation']            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
    period = filters['period']                  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
    page = filters['page']                      # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    result = get_history(id, category, operation, period, page)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
    if category == 'all' and operation == 'all' and period == 'alltime':    # "–ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ—Ç"
        filt = '–ù–µ—Ç'
    else: filt = '–°–≤–æ–∏'                                                     # "–ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 —Ñ–∏–ª—å—Ç—Ä"

    buttons = [
            [
                InlineKeyboardButton(text=f'üì• –§–∏–ª—å—Ç—Ä—ã: {filt}', callback_data=ActionCallback(action='filters').pack())
            ],
            [       
                InlineKeyboardButton(text='üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data=ActionCallback(action='see_stats').pack())
            ],
            [
                InlineKeyboardButton(text='‚óÄ', callback_data=ActionCallback(action='prev_history_page').pack()),
                InlineKeyboardButton(text=f'{str(page)}', callback_data=ActionCallback(action='history_num_page').pack()),
                InlineKeyboardButton(text='‚ñ∂', callback_data=ActionCallback(action='next_history_page').pack())
            ],
            [
                InlineKeyboardButton(text='‚óÑ –ù–∞–∑–∞–¥', callback_data=ActionCallback(action='back_to_menu').pack())
            ]
        ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Ä–∞–≤–Ω–∞ 1, —Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —é–∑–µ—Ä –¥–æ—à—ë–ª –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if not result and page != 1:
        await call.answer(text='–í—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.')
        await state.update_data(page=page-1)
    
    # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞, —Ñ–∏–ª—å—Ç—Ä—ã —Å—Ç–æ—è—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–≤–Ω–∞ 1, —Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —É —é–∑–µ—Ä–∞ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    elif not result and category == 'all' and operation == 'all' and period == 'alltime' and page == 1:
        await call.answer(text='–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ç—Ä–∞—Ç—É.')

    # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–≤–Ω–∞ 1 –∏ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä, —Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ø–æ —ç—Ç–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
    elif not result and (category != 'all' or operation != 'all' or period != 'alltime') and page == 1:
        try:        
            await call.message.edit_text(text=f'<b>–ù–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ —Ç–µ–∫—É—â–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.</b>', 
                                        reply_markup=kb)
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
        
        await call.answer()

    else:        
        main_cur = get_info(id, 'main_currency')                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞–ª—é—Ç—ã —é–∑–µ—Ä–∞

        msg = ''                                                    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Ç–µ–∫—Å—Ç —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        for index, i in enumerate(result):
                 
            if i[2] == '+':                                         # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–∞  
                msg += 'üü¢'
            else: msg += 'üî¥'

            # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤–∞–ª—é—Ç—ã –¥–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏, —Ç–æ –≤ —Å–∫–æ–±–∫–∏ –≤–Ω–æ—Å–∏—Ç—Å—è —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞–ª—é—Ç–µ
            if i[4] != main_cur:
                main_summa = '{:.2f}'.format(i[3] * cur_rate[f'{i[4]}_to_{main_cur}']).rstrip('0').rstrip('.')
                cur = f'{i[4]}({main_summa} {main_cur})'
            else: 
                cur = i[4]

            date = str(i[1])[8:10] + '.' + str(i[1])[5:7] + '.' + str(i[1])[2:4]                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
            summa ='{:.2f}'.format(i[3]).rstrip('0').rstrip('.')                                    # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
            msg += f'<b> {i[2]}{summa} {cur}‚ñ´Ô∏è<i>"{i[5]}"</i></b>‚ñ´Ô∏è{date} [<code>{i[0]}</code>]\n'    # –°–±–æ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Å—Ç—Ä–æ–∫–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if i[7] is not None:
                msg += f"<i>{i[7]}</i>\n"

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–ª–æ—Å—ã –ø–æ–¥ —Å—Ç—Ä–æ–∫—É(–Ω–æ —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è)
            if index < len(result) - 1: 
                msg += '<b>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî</b>\n'
        
        try:        
            await call.message.edit_text(text=f'<b>–í–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n\n{msg}',        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è 
                                        reply_markup=kb)
        
        # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –µ—Å–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):                           
                pass
            
        await call.answer()


# –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@rt.callback_query(ActionCallback.filter(F.action == 'filters'))
async def filters(call: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    data = await state.get_data()

    category = data['category']
    operation = data['operation']
    period = data['period']

    # –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫
    mapping = {
        'week': '–ù–µ–¥–µ–ª—è',
        'month': '–ú–µ—Å—è—Ü',
        'year': '–ì–æ–¥',
        'alltime': '–íc—ë –≤—Ä–µ–º—è',
        'all': '–í—Å–µ',
        'income': '–î–æ—Ö–æ–¥',
        'spends': '–¢—Ä–∞—Ç–∞'
    } 
    if category == 'all':
        category = '–í—Å–µ'

    buttons = [
        [
            InlineKeyboardButton(text=f'üìÜ –ü–µ—Ä–∏–æ–¥: {mapping.get(period)}', callback_data=ActionCallback(action='history_time').pack()),
            InlineKeyboardButton(text=f'üóÉ –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {mapping.get(operation)}', callback_data=ActionCallback(action='history_operation_type').pack())
        ],
        [
           InlineKeyboardButton(text=f'üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}', callback_data=ActionCallback(action='history_category').pack())
        ],
        [
            InlineKeyboardButton(text='–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', callback_data=ActionCallback(action='history_reset').pack())
        ],
        [
            InlineKeyboardButton(text='‚óÑ –ù–∞–∑–∞–¥', callback_data=ActionCallback(action='see_history').pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã:',
                                 reply_markup=kb)


# –•—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
@rt.callback_query(ActionCallback.filter(F.action == 'history_reset'))
async def his_res(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer()
    await see_histor(call, state)  


# –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
@rt.callback_query(ActionCallback.filter(F.action == 'history_operation_type'))
async def history_type(call: CallbackQuery):
    buttons = [
        [
            InlineKeyboardButton(text='üìà –î–æ—Ö–æ–¥', callback_data='income_history_type_in'),
            InlineKeyboardButton(text='üìâ –¢—Ä–∞—Ç–∞', callback_data='spends_history_type_in')
        ],
        [
            InlineKeyboardButton(text='–í—Å–µ', callback_data='all_history_type_in')
        ],
        [
            InlineKeyboardButton(text='‚óÑ –ù–∞–∑–∞–¥', callback_data='back_to_history_filters')
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–π:', 
                                 reply_markup=kb)
    await call.answer()
    

# –í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å—Ç—Ä–µ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@rt.callback_query(lambda c: 'history_type_in' in c.data)
async def answer(call: CallbackQuery, state: FSMContext):
    data = call.data.split('_')[0]
    await state.update_data(operation=data, page=1)
    await filters(call, state)


# –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@rt.callback_query(ActionCallback.filter(F.action == 'history_category'))
async def history_category(call: CallbackQuery):
    buttons = [
            [
                InlineKeyboardButton(text='üìà –î–æ—Ö–æ–¥',callback_data='in_hist_cat'),
                InlineKeyboardButton(text='üìâ –¢—Ä–∞—Ç–∞',callback_data='sp_hist_cat')
            ],
            [
                InlineKeyboardButton(text='–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',callback_data='all_hist_cat')
            ],
            [
                InlineKeyboardButton(text='‚óÑ –ù–∞–∑–∞–¥',callback_data='back_to_history_filters')
            ]
        ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', reply_markup=kb)
    await call.answer()


# –í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å—Ç—Ä–µ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@rt.callback_query(lambda c: '_hist_cat' in c.data)
async def answer(call: CallbackQuery, state: FSMContext):
    calldata = call.data.split(':')[1]
    data = calldata.split('_')[0]

    if data == 'all':
        await state.update_data(category=data, page=1)
        await filters(call, state)

    else:
        id = call.from_user.id
        a = get_categories(id, data)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ –≤—Å–µ–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –≤ RT_start)
        bd = InlineKeyboardBuilder()
        [bd.add(InlineKeyboardButton(
            text=f'"{i}"', 
            callback_data=f'history_cat_{i}'))
            for i in a]
        if len(a) >= 10:
            bd.adjust(2)
        else:
            bd.adjust(1)
        bd.row(InlineKeyboardButton(text='‚óÑ –ù–∞–∑–∞–¥', callback_data=ActionCallback(action='history_category').pack()))
        
        await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=bd.as_markup())
        await call.answer()


@rt.callback_query(lambda c: 'history_cat_' in c.data)
async def answer(call: CallbackQuery, state: FSMContext):
    data = call.data.split('_')[2]
    await state.update_data(category=data, page=1)
    await filters(call, state)


@rt.callback_query(lambda c: 'history_page' in c.data)
async def answer(call: CallbackQuery, state: FSMContext):
    calldata = call.data.split(':')[1]
    data = calldata.split('_')[0]

    st = await state.get_data()

    num = st['page']

    if data == 'prev' and num > 1:
        await state.update_data(page=num - 1)
        await see_histor(call, state)
    
    elif data == 'next':
        await state.update_data(page=num + 1)
        await see_histor(call, state)
    
    else:
        await call.answer(text='–í—ã –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.')


@rt.callback_query(ActionCallback.filter(F.action == 'history_time'))
async def history_category(call: CallbackQuery):
    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é:', reply_markup=await keyboards.kb_history_time())
    await call.answer()


@rt.callback_query(lambda c: 'history_choose_time_' in c.data)
async def answer(call: CallbackQuery, state: FSMContext):
    calldata = call.data.split(':')[1]
    data = calldata.split('_')[3]

    await state.update_data(period=data, page=1)
    await filters(call, state)


@rt.callback_query(ActionCallback.filter(F.action == 'back_to_history_filters'))
async def back_to_history_filters(call: CallbackQuery, state: FSMContext):
    await filters(call, state)
    await call.answer()


@rt.callback_query(ActionCallback.filter(F.action == 'history_num_page'))
async def history_num_page(call: CallbackQuery):
    await call.answer()
